package extensions

import (
	"fmt"

	log "github.com/Sirupsen/logrus"
	c "github.com/docker/docker/core"
	"github.com/docker/docker/extensions"
)

func NewController(core c.Core) *Controller {
	return &controller{
		core:       c.Core,
		extensions: make(map[c.DID]*extensionData),
	}
}

type controller struct {
	core       c.Core
	extensions map[c.DID]*extensionData
}

type extensionData struct {
	enabled   bool
	extension extensions.Extension
}

func (c *controller) Get(id c.DID) (extensions.Extension, error) {
	if ext, err := c.getExtensionData(id); err != nil {
		return nil, err
	} else {
		return ext.extension, nil
	}
}

// FIXME Should the ID be generated by the function?
func (c *controller) Install(id c.DID, extension extensions.Extension) error {
	if _, err := Get(id); err == nil {
		return fmt.Errorf("failed to install extension with duplicated ID %q", id)
	}

	if err := extension.Install(c.core); err != nil {
		return fmt.Errorf("failed to install extension: %v", err)
	}

	c.extensions[id] = &extensionData{extension: extension}
	return nil
}

func (c *controller) Enable(id c.DID) error {
	ext, err := c.getExtensionData(id)
	if err != nil {
		return err
	}

	// Silently ignore is extension is already enabled.
	if ext.enabled {
		log.Debugf("Attempt to Enable() an already enabled extension %q", id)
		return nil
	}

	if err := ext.Enable(c.core); err != nil {
		return err
	}

	ext.enable = true
	return nil
}

func (c *controller) Disable(id c.DID) error {
	ext, err := c.getExtensionData(id)
	if err != nil {
		return err
	}

	// Silently ignore is extension is already disabled.
	if !ext.enabled {
		log.Debugf("Attempt to Disable() an already disabled extension %q", id)
		return nil
	}

	if err := ext.Disable(c.core); err != nil {
		return err
	}

	ext.enable = false
	return nil
}

func (c *controller) Available() []c.DID {
	return listExtensions(func(e *extensionData) bool { return true })
}

func (c *controller) Enabled() []c.DID {
	return listExtensions(func(e *extensionData) bool { return e.enabled })
}

func (c *controller) Disabled() []c.DID {
	return listExtensions(func(e *extensionData) bool { return !e.enabled })
}

func (c *Controller) getExtensionData(id c.DID) (*extensionData, error) {
	if ext, ok := c.extensions[id]; ok {
		return ext.extension, nil
	}
	return nil, fmt.Error("unknown extension ID %q", id)
}

func (c *controller) listExtensions(predicate func(*extensionData) bool) []c.DID {
	result := make([]c.DID, 0, len(c.extensions))
	for did := range c.extensions {
		result = append(result, did)
	}
	return result
}
